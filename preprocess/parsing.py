import os
import argparse


def parse_arguments(args=None):
    parser = argparse.ArgumentParser(
        prog="scAlign preprocessing",
        description="preprocess single-cell data",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument(
        "--sample",
        required=True,
        type=str,
        help="sample name, used for output prefix",
    )
    parser.add_argument(
        "--seg",
        required=False,
        type=str,
        help="seg.ucn.tsv generated by HATCHet2",
    )
    parser.add_argument(
        "--bbc",
        required=False,
        type=str,
        help="bbc.ucn.tsv generated by HATCHet2",
    )
    parser.add_argument(
        "--nbed",
        required=False,
        type=str,
        help="normal.1bed generated by HATCHet2",
    )
    parser.add_argument(
        "--tbed",
        required=False,
        type=str,
        help="tumor.1bed generated by HATCHet2",
    )
    parser.add_argument(
        "--vcf",
        required=False,
        type=str,
        help="sample.vcf.gz, original VCF file input to cellSNP-lite",
    )
    parser.add_argument(
        "--hairs",
        required=False,
        type=str,
        help="hair file hairs.tsv.gz, cleaned up script, after HapCUT2",
    )

    parser.add_argument(
        "--barcodes",
        required=False,
        type=str,
        help="cellSNP.samples.tsv generated by cellSNP-lite and consistent across all matrices",
    )
    parser.add_argument(
        "--cr_dir",
        required=False,
        type=str,
        help="output directory by cell-ranger, e.g., filtered_feature_bc_matrix/"
    )
    parser.add_argument(
        "--atac_dir",
        required=False,
        type=str,
        help="output directory by cellSNP-lite using s[c/n]ATAC-seq"
    )
    parser.add_argument(
        "--gex_dir",
        required=False,
        type=str,
        help="output directory by cellSNP-lite using s[c/n]RNA-seq"
    )

    parser.add_argument(
        "-o",
        "--outdir",
        required=True,
        type=str,
        help="output directory",
    )
    parser.add_argument(
        "--laplace",
        required=False,
        default=0.01,
        type=float,
        help="Laplace smoothing term when computing clone BAF",
    )
    args = parser.parse_args()

    atac_vcf = os.path.join(args.atac_dir, "cellSNP.base.vcf.gz")
    atac_dp = os.path.join(args.atac_dir, "cellSNP.tag.DP.mtx")
    atac_ad = os.path.join(args.atac_dir, "cellSNP.tag.AD.mtx")
    gex_vcf = os.path.join(args.gex_dir, "cellSNP.base.vcf.gz")
    gex_dp = os.path.join(args.gex_dir, "cellSNP.tag.DP.mtx")
    gex_ad = os.path.join(args.gex_dir, "cellSNP.tag.AD.mtx")

    raw_barcodes = os.path.join(args.cr_dir, "barcodes.tsv.gz")
    raw_features = os.path.join(args.cr_dir, "features.tsv.gz")
    feature_mtx = os.path.join(args.cr_dir, "matrix.mtx.gz")


    # sanity check
    return {
        "sample": args.sample,
        "seg": args.seg,
        "bbc": args.bbc,
        "nbed": args.nbed,
        "tbed": args.tbed,
        "vcf": args.vcf,
        "hairs": args.hairs,
        "barcodes": args.barcodes,
        "atac_vcf": atac_vcf,
        "atac_dp": atac_dp,
        "atac_ad": atac_ad,
        "gex_vcf": gex_vcf,
        "gex_dp": gex_dp,
        "gex_ad": gex_ad,
        "raw_barcodes": raw_barcodes,
        "raw_features": raw_features,
        "feature_mtx": feature_mtx,
        "outdir": args.outdir,
        "laplace": args.laplace,
    }
